[
  {
    "line": 1,
    "elements": [
      {
        "start_timestamp": "2022-07-31T19:57:13.881Z",
        "before": [
          {
            "result": {
              "duration": 636000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 5617000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 12,
        "name": "Logging a string in Cucumber-JVM 6.7.0",
        "description": "",
        "id": "attachments;logging-a-string-in-cucumber-jvm-6.7.0",
        "after": [
          {
            "result": {
              "duration": 184000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 48000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1902000,
              "status": "passed"
            },
            "line": 14,
            "name": "a Step has logged a string in Cucumber-JVM 6.7.0",
            "match": {
              "arguments": [
                {
                  "val": "6.7",
                  "offset": 43
                },
                {
                  "val": "0",
                  "offset": 47
                }
              ],
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.a_Step_has_logged_a_string_in_Cucumber_JVM(java.lang.Double,java.lang.Integer)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 65000,
              "status": "passed"
            },
            "line": 15,
            "name": "I am hiding step timings",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_am_hiding_step_timings()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 715000,
              "status": "passed"
            },
            "line": 16,
            "name": "all Cukedoctor extensions are disabled",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.all_cukedoctor_extensions_are_disabled()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14335000,
              "status": "passed"
            },
            "line": 17,
            "name": "I convert the Feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_convert_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 148000,
              "status": "passed"
            },
            "line": 18,
            "name": "it will be rendered as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.it_will_be_rendered_as(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 19,
              "value": "\u003d *Features*\n\n\n[[Attachments, Attachments]]\n\u003d\u003d *Attachments*\n\n\u003d\u003d\u003d Scenario: Cucumber JVM 6.7.0 scenario.log(String)\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\na Step that performs scenario.log(String) icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"]\n----\nShe sells sea shells on the sea shore\n----\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:13.933Z",
        "before": [
          {
            "result": {
              "duration": 65000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 227000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 39,
        "name": "Attaching plain text as a string with name in Cucumber-JVM 6.7.0",
        "description": "",
        "id": "attachments;attaching-plain-text-as-a-string-with-name-in-cucumber-jvm-6.7.0",
        "after": [
          {
            "result": {
              "duration": 96000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 29000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 316000,
              "status": "passed"
            },
            "line": 41,
            "name": "a Step has attached plain text as a string with a title in Cucumber-JVM 6.7.0",
            "match": {
              "arguments": [
                {
                  "val": "6.7",
                  "offset": 72
                },
                {
                  "val": "0",
                  "offset": 76
                }
              ],
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.a_Step_has_attached_plain_text_as_a_string_with_a_title_in_Cucumber_JVM(java.lang.Double,java.lang.Integer)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36000,
              "status": "passed"
            },
            "line": 42,
            "name": "I am hiding step timings",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_am_hiding_step_timings()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29000,
              "status": "passed"
            },
            "line": 43,
            "name": "all Cukedoctor extensions are disabled",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.all_cukedoctor_extensions_are_disabled()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14417000,
              "status": "passed"
            },
            "line": 44,
            "name": "I convert the Feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_convert_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 152000,
              "status": "passed"
            },
            "line": 45,
            "name": "it will be rendered as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.it_will_be_rendered_as(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 46,
              "value": "\u003d *Features*\n\n\n[[Attachments, Attachments]]\n\u003d\u003d *Attachments*\n\n\u003d\u003d\u003d Scenario: Cucumber JVM 6.7.0 scenario.attach(String, String, String)\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\na Step that performs scenario.attach(String, String, String) icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"]\n\n.String plain text\n[%collapsible]\n\u003d\u003d\u003d\u003d\u003d\nShe sells sea shells on the sea shore\n\u003d\u003d\u003d\u003d\u003d\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:13.959Z",
        "before": [
          {
            "result": {
              "duration": 54000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 221000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 70,
        "name": "Attaching plain text as a byte array with name in Cucumber-JVM 6.7.0",
        "description": "",
        "id": "attachments;attaching-plain-text-as-a-byte-array-with-name-in-cucumber-jvm-6.7.0",
        "after": [
          {
            "result": {
              "duration": 84000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 27000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 305000,
              "status": "passed"
            },
            "line": 72,
            "name": "a Step has attached plain text as a byte array with a title in Cucumber-JVM 6.7.0",
            "match": {
              "arguments": [
                {
                  "val": "6.7",
                  "offset": 76
                },
                {
                  "val": "0",
                  "offset": 80
                }
              ],
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.a_Step_has_attached_plain_text_as_a_byte_array_with_a_title_in_Cucumber_JVM(java.lang.Double,java.lang.Integer)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38000,
              "status": "passed"
            },
            "line": 73,
            "name": "I am hiding step timings",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_am_hiding_step_timings()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27000,
              "status": "passed"
            },
            "line": 74,
            "name": "all Cukedoctor extensions are disabled",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.all_cukedoctor_extensions_are_disabled()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14478000,
              "status": "passed"
            },
            "line": 75,
            "name": "I convert the Feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_convert_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 165000,
              "status": "passed"
            },
            "line": 76,
            "name": "it will be rendered as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.it_will_be_rendered_as(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 77,
              "value": "\u003d *Features*\n\n\n[[Attachments, Attachments]]\n\u003d\u003d *Attachments*\n\n\u003d\u003d\u003d Scenario: Cucumber JVM 6.7.0 scenario.attach(ByteArray, String, String)\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\na Step that performs scenario.attach(ByteArray, String, String) icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"]\n\n.Byte[] plain text\n[%collapsible]\n\u003d\u003d\u003d\u003d\u003d\nShe sells sea shells on the sea shore\n\u003d\u003d\u003d\u003d\u003d\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:13.987Z",
        "before": [
          {
            "result": {
              "duration": 46000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 195000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 101,
        "name": "Attaching a string CucumberJS 6.0.5",
        "description": "",
        "id": "attachments;attaching-a-string-cucumberjs-6.0.5",
        "after": [
          {
            "result": {
              "duration": 85000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 25000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 322000,
              "status": "passed"
            },
            "line": 103,
            "name": "a Step has attached a string in CucumberJS 6.0.5",
            "match": {
              "arguments": [
                {
                  "val": "6.0",
                  "offset": 43
                },
                {
                  "val": "5",
                  "offset": 47
                }
              ],
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.a_Step_has_attached_a_string_in_CucumberJS(java.lang.Double,java.lang.Integer)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 39000,
              "status": "passed"
            },
            "line": 104,
            "name": "I am hiding step timings",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_am_hiding_step_timings()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26000,
              "status": "passed"
            },
            "line": 105,
            "name": "all Cukedoctor extensions are disabled",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.all_cukedoctor_extensions_are_disabled()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17051000,
              "status": "passed"
            },
            "line": 106,
            "name": "I convert the Feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_convert_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 144000,
              "status": "passed"
            },
            "line": 107,
            "name": "it will be rendered as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.it_will_be_rendered_as(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 108,
              "value": "\u003d *Features*\n\n\n[[Attachments, Attachments]]\n\u003d\u003d *Attachments*\n\n\u003d\u003d\u003d Scenario: Cucumber JS 6.0.5 attach String\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\na Step that performs attach String icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"]\n\n.Attachment 1\n[%collapsible]\n\u003d\u003d\u003d\u003d\u003d\nShe sells sea shells on the sea shore\n\u003d\u003d\u003d\u003d\u003d\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.010Z",
        "before": [
          {
            "result": {
              "duration": 45000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 192000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 132,
        "name": "Attaching a plain text string CucumberJS 6.0.5",
        "description": "",
        "id": "attachments;attaching-a-plain-text-string-cucumberjs-6.0.5",
        "after": [
          {
            "result": {
              "duration": 78000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 25000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 295000,
              "status": "passed"
            },
            "line": 134,
            "name": "a Step has attached plain text as a string in CucumberJS 6.0.5",
            "match": {
              "arguments": [
                {
                  "val": "6.0",
                  "offset": 57
                },
                {
                  "val": "5",
                  "offset": 61
                }
              ],
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.a_Step_has_attached_plain_text_as_a_string_in_CucumberJS(java.lang.Double,java.lang.Integer)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34000,
              "status": "passed"
            },
            "line": 135,
            "name": "I am hiding step timings",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_am_hiding_step_timings()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25000,
              "status": "passed"
            },
            "line": 136,
            "name": "all Cukedoctor extensions are disabled",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.all_cukedoctor_extensions_are_disabled()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4939000,
              "status": "passed"
            },
            "line": 137,
            "name": "I convert the Feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_convert_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 127000,
              "status": "passed"
            },
            "line": 138,
            "name": "it will be rendered as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.it_will_be_rendered_as(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 139,
              "value": "\u003d *Features*\n\n\n[[Attachments, Attachments]]\n\u003d\u003d *Attachments*\n\n\u003d\u003d\u003d Scenario: Cucumber JS 6.0.5 attach String, String\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\na Step that performs attach String, String icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"]\n\n.Attachment 1\n[%collapsible]\n\u003d\u003d\u003d\u003d\u003d\nShe sells sea shells on the sea shore\n\u003d\u003d\u003d\u003d\u003d\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.021Z",
        "before": [
          {
            "result": {
              "duration": 42000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 170000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 163,
        "name": "Attaching a plain text buffer CucumberJS 6.0.5",
        "description": "",
        "id": "attachments;attaching-a-plain-text-buffer-cucumberjs-6.0.5",
        "after": [
          {
            "result": {
              "duration": 63000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 25000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 285000,
              "status": "passed"
            },
            "line": 165,
            "name": "a Step has attached plain text as a buffer in CucumberJS 6.0.5",
            "match": {
              "arguments": [
                {
                  "val": "6.0",
                  "offset": 57
                },
                {
                  "val": "5",
                  "offset": 61
                }
              ],
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.a_Step_has_attached_plain_text_as_a_buffer_in_CucumberJS(java.lang.Double,java.lang.Integer)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34000,
              "status": "passed"
            },
            "line": 166,
            "name": "I am hiding step timings",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_am_hiding_step_timings()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25000,
              "status": "passed"
            },
            "line": 167,
            "name": "all Cukedoctor extensions are disabled",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.all_cukedoctor_extensions_are_disabled()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4612000,
              "status": "passed"
            },
            "line": 168,
            "name": "I convert the Feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_convert_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 121000,
              "status": "passed"
            },
            "line": 169,
            "name": "it will be rendered as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.it_will_be_rendered_as(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 170,
              "value": "\u003d *Features*\n\n\n[[Attachments, Attachments]]\n\u003d\u003d *Attachments*\n\n\u003d\u003d\u003d Scenario: Cucumber JS 6.0.5 attach Buffer, String\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\na Step that performs attach Buffer, String icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"]\n\n.Attachment 1\n[%collapsible]\n\u003d\u003d\u003d\u003d\u003d\nShe sells sea shells on the sea shore\n\u003d\u003d\u003d\u003d\u003d\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.031Z",
        "before": [
          {
            "result": {
              "duration": 39000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 161000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 194,
        "name": "Logged text should appear before attachments",
        "description": "",
        "id": "attachments;logged-text-should-appear-before-attachments",
        "after": [
          {
            "result": {
              "duration": 66000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 23000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 192000,
              "status": "passed"
            },
            "line": 196,
            "name": "a Step has logged a string and attached a plain text string with a title",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.a_Step_has_logged_a_string_and_attached_a_plain_text_string_with_a_title()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29000,
              "status": "passed"
            },
            "line": 197,
            "name": "I am hiding step timings",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_am_hiding_step_timings()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25000,
              "status": "passed"
            },
            "line": 198,
            "name": "all Cukedoctor extensions are disabled",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.all_cukedoctor_extensions_are_disabled()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4547000,
              "status": "passed"
            },
            "line": 199,
            "name": "I convert the Feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_convert_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 121000,
              "status": "passed"
            },
            "line": 200,
            "name": "it will be rendered as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.it_will_be_rendered_as(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 201,
              "value": "\u003d *Features*\n\n\n[[Attachments, Attachments]]\n\u003d\u003d *Attachments*\n\n\u003d\u003d\u003d Scenario: Log and attach\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\na Step that logs and attaches icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"]\n----\nPeter Piper picked a peck of pickled peppers\n----\n\n.String plain text\n[%collapsible]\n\u003d\u003d\u003d\u003d\u003d\nShe sells sea shells on the sea shore\n\u003d\u003d\u003d\u003d\u003d\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.041Z",
        "before": [
          {
            "result": {
              "duration": 38000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 172000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 228,
        "name": "Multiple attachments",
        "description": "",
        "id": "attachments;multiple-attachments",
        "after": [
          {
            "result": {
              "duration": 68000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 23000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 196000,
              "status": "passed"
            },
            "line": 230,
            "name": "a Step has three plain text attachments, two without a title",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.a_Step_has_three_plain_text_attachments_two_without_a_title()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30000,
              "status": "passed"
            },
            "line": 231,
            "name": "I am hiding step timings",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_am_hiding_step_timings()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24000,
              "status": "passed"
            },
            "line": 232,
            "name": "all Cukedoctor extensions are disabled",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.all_cukedoctor_extensions_are_disabled()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4714000,
              "status": "passed"
            },
            "line": 233,
            "name": "I convert the Feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_convert_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 168000,
              "status": "passed"
            },
            "line": 234,
            "name": "it will be rendered as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.it_will_be_rendered_as(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 235,
              "value": "\u003d *Features*\n\n\n[[Attachments, Attachments]]\n\u003d\u003d *Attachments*\n\n\u003d\u003d\u003d Scenario: Multiple attachments\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\na Step that has multiple attachments icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"]\n\n.Attachment 1\n[%collapsible]\n\u003d\u003d\u003d\u003d\u003d\nFirst attachment\n\u003d\u003d\u003d\u003d\u003d\n\n.Second\n[%collapsible]\n\u003d\u003d\u003d\u003d\u003d\nSecond Attachment\n\u003d\u003d\u003d\u003d\u003d\n\n.Attachment 2\n[%collapsible]\n\u003d\u003d\u003d\u003d\u003d\nThird attachment\n\u003d\u003d\u003d\u003d\u003d\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.053Z",
        "before": [
          {
            "result": {
              "duration": 40000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 162000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 271,
        "name": "Do not render attachments that are not plain text",
        "description": "",
        "id": "attachments;do-not-render-attachments-that-are-not-plain-text",
        "after": [
          {
            "result": {
              "duration": 64000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 22000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 183000,
              "status": "passed"
            },
            "line": 273,
            "name": "a Step has logged an image/png attachment",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.a_Step_has_logged_an_image_png_attachment()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 27000,
              "status": "passed"
            },
            "line": 274,
            "name": "I am hiding step timings",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_am_hiding_step_timings()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23000,
              "status": "passed"
            },
            "line": 275,
            "name": "all Cukedoctor extensions are disabled",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.all_cukedoctor_extensions_are_disabled()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4310000,
              "status": "passed"
            },
            "line": 276,
            "name": "I convert the Feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.i_convert_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 105000,
              "status": "passed"
            },
            "line": 277,
            "name": "it will be rendered as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.it_will_be_rendered_as(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 278,
              "value": "\u003d *Features*\n\n\n[[Attachments, Attachments]]\n\u003d\u003d *Attachments*\n\n\u003d\u003d\u003d Scenario: Attaching an image\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\na Step that attaches an image icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"]\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ]
      }
    ],
    "name": "Attachments",
    "description": "  \u003d\u003d\u003d\u003d\n  [quote]\n  ____\n  In order to capture dynamically-generated content from my tests\n  As a bdd developer\n  I want to render attachments from my Cucumber tests in my living documentation\n  ____\n  \u003d\u003d\u003d\u003d",
    "id": "attachments",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/attachments.feature",
    "tags": []
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2022-07-31T19:57:14.068Z",
        "before": [
          {
            "result": {
              "duration": 47000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 180000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 11,
        "name": "Convert features test output into documentation",
        "description": "",
        "id": "cukedoctor-converter;convert-features-test-output-into-documentation",
        "after": [
          {
            "result": {
              "duration": 75000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 37000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 151000,
              "status": "passed"
            },
            "line": 13,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 14,
              "value": "Feature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 14164000,
              "status": "passed"
            },
            "line": 27,
            "name": "I convert their json test output using cukedoctor converter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.ConverterSteps.I_convert_their_json_output_report_using_cukedoctor_converter(java.lang.String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 28,
              "value": "[IMPORTANT]\n\u003d\u003d\u003d\u003d\u003d\u003d\nTo generate cucumber .json output files just execute your _BDD_ tests with *json* formatter, example:\n\n[source,java]\n----\n@RunWith(Cucumber.class)\n@CucumberOptions(plugin \u003d {\"json:target/cucumber.json\"} )\n----\nNOTE: *plugin* option replaced *format* option which was deprecated in newer cucumber versions.\n\n\u003d\u003d\u003d\u003d\u003d\u003d"
            }
          },
          {
            "result": {
              "duration": 208000,
              "status": "passed"
            },
            "line": 43,
            "name": "I should have awesome living documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.ConverterSteps.I_should_have_awesome_living_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 44,
              "value": "\n\u003d *Documentation*\n\n\n\n\u003d\u003d *Summary*\n[cols\u003d\"12*^m\", options\u003d\"header,footer\"]\n|\u003d\u003d\u003d\n3+|Scenarios 7+|Steps 2+|Features: 2\n\n|[green]#*Passed*#\n|[red]#*Failed*#\n|Total\n|[green]#*Passed*#\n|[red]#*Failed*#\n|[purple]#*Skipped*#\n|[maroon]#*Pending*#\n|[yellow]#*Undefined*#\n|[blue]#*Missing*#\n|Total\n|Duration\n|Status\n\n12+^|*\u003c\u003cFeature1\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|647ms\n|[green]#*passed*#\n\n12+^|*\u003c\u003cFeature2\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|000ms\n|[green]#*passed*#\n12+^|*Totals*\n|2|0|2|2|0|0|0|0|0|2 2+|647ms\n|\u003d\u003d\u003d\n\n\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(647ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-0"
          }
        ]
      }
    ],
    "name": "Cukedoctor Converter",
    "description": "  \u003d\u003d\u003d\u003d\n  [quote]\n  ____\n  In order to have awesome _living documentation_\n  As a bdd developer\n  I want to use *Cukedoctor* to convert my cucumber test results into `readable` living documentation.\n  ____\n  \u003d\u003d\u003d\u003d",
    "id": "cukedoctor-converter",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/converter.feature",
    "tags": [
      {
        "name": "@order-0",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2022-07-31T19:57:14.100Z",
        "before": [
          {
            "result": {
              "duration": 56000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 215000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 26,
        "name": "DocString enrichment activated by the content type",
        "description": "  Asciidoc markup can be used in feature *DocStrings*. To do so you can enable it by using the content type *[asciidoc]* in the DocString.",
        "id": "enrich-features;docstring-enrichment-activated-by-the-content-type",
        "after": [
          {
            "result": {
              "duration": 81000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 24000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 78000,
              "status": "passed"
            },
            "line": 29,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 30,
              "value": "Feature: Discrete class feature\n\n  Scenario: Render source code\n\n    Given the following source code in docstrings\n\"\"\"asciidoc\n  [source, java]\n  -----\n  public int sum(int x, int y){\n  int result \u003d x + y;\n  return result; (1)\n  }\n  -----\n  \u003c1\u003e We can have callouts in living documentation\n\"\"\"\n\n  Scenario: Render table\n\n    Given the following table\n \"\"\"asciidoc\n  |\u003d\u003d\u003d\n\n  | Cell in column 1, row 1 | Cell in column 2, row 1\n  | Cell in column 1, row 2 | Cell in column 2, row 2\n  | Cell in column 1, row 3 | Cell in column 2, row 3\n\n  |\u003d\u003d\u003d\n\"\"\""
            }
          },
          {
            "result": {
              "duration": 11403000,
              "status": "passed"
            },
            "line": 61,
            "name": "I convert enriched docstring with asciidoc content type using cukedoctor converter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.I_convert_enriched_docstring_with_content_type_using_cukedoctor_converter()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 163000,
              "status": "passed"
            },
            "line": 63,
            "name": "DocString asciidoc output must be rendered in my documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.DocString_asciidoc_output_must_be_rendered_in_my_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 64,
              "value": "\u003d\u003d *Features*\n\n[[Discrete-class-feature, Discrete class feature]]\n\u003d\u003d\u003d *Discrete class feature*\n\n\u003d\u003d\u003d\u003d Scenario: Render source code\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following source code in docstrings icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(002ms)#\n******\n\n[discrete]\n[source, java]\n-----\npublic int sum(int x, int y){\n    int result \u003d x + y;\n    return result; (1)\n}\n-----\n[discrete]\n\u003c1\u003e We can have callouts in living documentation\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Render table\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following table icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n******\n\n[discrete]\n|\u003d\u003d\u003d\n| Cell in column 1, row 1 | Cell in column 2, row 1\n| Cell in column 1, row 2 | Cell in column 2, row 2\n| Cell in column 1, row 3 | Cell in column 2, row 3\n|\u003d\u003d\u003d\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-2"
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.132Z",
        "before": [
          {
            "result": {
              "duration": 37000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 171000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 113,
        "name": "DocString enrichment activated by a feature tag",
        "description": "  Asciidoc markup can be used in feature *DocStrings*. You can enable this by applying the tag [@asciidoc] to the feature. Note this enables the enrichment for all DocStrings within the feature.",
        "id": "enrich-features;docstring-enrichment-activated-by-a-feature-tag",
        "after": [
          {
            "result": {
              "duration": 101000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 26000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 69000,
              "status": "passed"
            },
            "line": 116,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 117,
              "value": "@asciidoc\nFeature: Discrete class feature\n\n  Scenario: Render source code\n\n    Given the following source code in docstrings\n\"\"\"\n  [source, java]\n  -----\n  public int sum(int x, int y){\n  int result \u003d x + y;\n  return result; (1)\n  }\n  -----\n  \u003c1\u003e We can have callouts in living documentation\n\"\"\"\n\n  Scenario: Render table\n\n    Given the following table\n \"\"\"\n  |\u003d\u003d\u003d\n\n  | Cell in column 1, row 1 | Cell in column 2, row 1\n  | Cell in column 1, row 2 | Cell in column 2, row 2\n  | Cell in column 1, row 3 | Cell in column 2, row 3\n\n  |\u003d\u003d\u003d\n\"\"\""
            }
          },
          {
            "result": {
              "duration": 13697000,
              "status": "passed"
            },
            "line": 149,
            "name": "I convert enriched docstring with asciidoc feature tag using cukedoctor converter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.I_convert_docstring_enriched_json_output_activiated_with_a_feature_tag_using_cukedoctor_converter()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 160000,
              "status": "passed"
            },
            "line": 151,
            "name": "DocString asciidoc output must be rendered in my documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.DocString_asciidoc_output_must_be_rendered_in_my_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 152,
              "value": "\u003d\u003d *Features*\n\n[[Discrete-class-feature, Discrete class feature]]\n\u003d\u003d\u003d *Discrete class feature*\n\n\u003d\u003d\u003d\u003d Scenario: Render source code\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following source code in docstrings icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(011ms)#\n******\n\n[discrete]\n[source, java]\n-----\npublic int sum(int x, int y){\n    int result \u003d x + y;\n    return result; (1)\n}\n-----\n[discrete]\n\u003c1\u003e We can have callouts in living documentation\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Render table\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following table icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n******\n\n[discrete]\n|\u003d\u003d\u003d\n| Cell in column 1, row 1 | Cell in column 2, row 1\n| Cell in column 1, row 2 | Cell in column 2, row 2\n| Cell in column 1, row 3 | Cell in column 2, row 3\n|\u003d\u003d\u003d\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-2"
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.158Z",
        "before": [
          {
            "result": {
              "duration": 50000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 216000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 201,
        "name": "DocString enrichment activated by a scenario tag",
        "description": "  Asciidoc markup can be used in feature *DocStrings*. You can enable this by applying the tag [@asciidoc] to the scenario. Note this enables the enrichment for all DocStrings within the scenario.",
        "id": "enrich-features;docstring-enrichment-activated-by-a-scenario-tag",
        "after": [
          {
            "result": {
              "duration": 87000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 25000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 76000,
              "status": "passed"
            },
            "line": 204,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 205,
              "value": "Feature: Discrete class feature\n\n  @asciidoc\n  Scenario: Render source code\n\n    Given the following source code in docstrings\n\"\"\"\n  [source, java]\n  -----\n  public int sum(int x, int y){\n  int result \u003d x + y;\n  return result; (1)\n  }\n  -----\n  \u003c1\u003e We can have callouts in living documentation\n\"\"\"\n\n  @asciidoc\n  Scenario: Render table\n\n    Given the following table\n \"\"\"\n  |\u003d\u003d\u003d\n\n  | Cell in column 1, row 1 | Cell in column 2, row 1\n  | Cell in column 1, row 2 | Cell in column 2, row 2\n  | Cell in column 1, row 3 | Cell in column 2, row 3\n\n  |\u003d\u003d\u003d\n\"\"\""
            }
          },
          {
            "result": {
              "duration": 10197000,
              "status": "passed"
            },
            "line": 238,
            "name": "I convert enriched docstring with asciidoc scenario tag using cukedoctor converter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.I_convert_docstring_enriched_json_output_activiated_with_a_scenario_tag_using_cukedoctor_converter()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 129000,
              "status": "passed"
            },
            "line": 241,
            "name": "DocString asciidoc output must be rendered in my documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.DocString_asciidoc_output_must_be_rendered_in_my_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 242,
              "value": "\u003d\u003d *Features*\n\n[[Discrete-class-feature, Discrete class feature]]\n\u003d\u003d\u003d *Discrete class feature*\n\n\u003d\u003d\u003d\u003d Scenario: Render source code\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following source code in docstrings icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(002ms)#\n******\n\n[discrete]\n[source, java]\n-----\npublic int sum(int x, int y){\n    int result \u003d x + y;\n    return result; (1)\n}\n-----\n[discrete]\n\u003c1\u003e We can have callouts in living documentation\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Render table\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following table icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n******\n\n[discrete]\n|\u003d\u003d\u003d\n| Cell in column 1, row 1 | Cell in column 2, row 1\n| Cell in column 1, row 2 | Cell in column 2, row 2\n| Cell in column 1, row 3 | Cell in column 2, row 3\n|\u003d\u003d\u003d\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-2"
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.176Z",
        "before": [
          {
            "result": {
              "duration": 50000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 501000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 292,
        "name": "Whitespace in descriptions",
        "description": "      Features and Scenarios can have multi-line descriptions. In a feature file, these may be indented.\n      Cukedoctor uses the indentation of the first line non-blank line of the description to determine the difference\n      between the indentation _of_ the description in a feature file and your desired indentation _within_ the the\n      description itself.",
        "id": "enrich-features;whitespace-in-descriptions",
        "after": [
          {
            "result": {
              "duration": 132000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 30000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 500000,
              "status": "passed"
            },
            "line": 298,
            "name": "the feature:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.the_feature(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 299,
              "value": "  Feature: Feature One\n\n\n    This is the description for Feature One. The first non-blank line of this description in the feature file began with four whitespace characters.\n      Therefore, cukedoctor will ignore up to the first four\nwhitespace characters\n  in all other lines in the same description,\n    if any are present.\n\n\nThis includes\n  further lines\n    in a different\n      paragraph\n        in the same description.\n\n\n\n    Scenario: Scenario One\n\n    This is the description for Scenario One. The first non-blank line of this description in the feature file began with four whitespace characters.\n      Therefore, cukedoctor will ignore up to the first four\nwhitespace characters\n  in all other lines in the same description,\n    if any are present.\n\n\nThis includes\n  further lines\n    in a different\n      paragraph\n        in the same description.\n\n\n\n    Scenario: Scenario Two\nThis scenario has no indentation. You don\u0027t have to use it, after all.\n      Indentation in subsequent lines is therefore fully preserved.\n"
            }
          },
          {
            "result": {
              "duration": 53433000,
              "status": "passed"
            },
            "line": 340,
            "name": "I convert it",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.I_convert_it()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 159000,
              "status": "passed"
            },
            "line": 341,
            "name": "it should be rendered in AsciiDoc as",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.DocString_asciidoc_output_must_be_rendered_in_my_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 342,
              "value": "\u003d\u003d *Features*\n\n[[Feature-One, Feature One]]\n\u003d\u003d\u003d *Feature One*\n\n****\nThis is the description for Feature One. The first non-blank line of this description in the feature file began with four whitespace characters.\n  Therefore, cukedoctor will ignore up to the first four\nwhitespace characters\nin all other lines in the same description,\nif any are present.\n\n\nThis includes\nfurther lines\nin a different\n  paragraph\n    in the same description.\n****\n\n\u003d\u003d\u003d\u003d Scenario: Scenario One\nThis is the description for Scenario One. The first non-blank line of this description in the feature file began with four whitespace characters.\n  Therefore, cukedoctor will ignore up to the first four\nwhitespace characters\nin all other lines in the same description,\nif any are present.\n\n\nThis includes\nfurther lines\nin a different\n  paragraph\n    in the same description.\n\n\u003d\u003d\u003d\u003d Scenario: Scenario Two\nThis scenario has no indentation. You don\u0027t have to use it, after all.\n      Indentation in subsequent lines is therefore fully preserved.\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-2"
          }
        ]
      }
    ],
    "name": "Enrich features",
    "description": "  \u003d\u003d\u003d\u003d\n  [quote]\n  ____\n  In order to have awesome _living documentation_\n  As a bdd developer\n  I want to render asciidoc markup inside my features.\n  ____\n  \u003d\u003d\u003d\u003d\n\n  https://asciidoctor.org/docs/what-is-asciidoc/[Asciidoc^] markup can be used in feature *DocStrings*. To do so you can enable it by using *@asciidoc* tag at `feature` or `scenario` level.\n\n  [IMPORTANT]\n  \u003d\u003d\u003d\u003d\u003d\n  Adding @asciidoc tag at *feature level* will make cukedoctor interpret `all features docstrings` as Asciidoc markup.\n\n  Adding @asciidoc at *scenario level* will make cukedoctor interpret `all steps docstrings` as asciidoc markup.\n\n  TIP: To enable asciidoc markup in a *single step* you can use `asciidoc` as https://relishapp.com/cucumber/cucumber/docs/gherkin/doc-strings#docstring-with-interesting-content-type[docstring content type^].\n  \u003d\u003d\u003d\u003d\u003d\n\n  NOTE: Feature and scenario descriptions are automatically interpreted as Asciidoc markup without the need for adding the feature tag.",
    "id": "enrich-features",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/enrichment.feature",
    "tags": [
      {
        "name": "@order-2",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2022-07-31T19:57:14.253Z",
        "before": [
          {
            "result": {
              "duration": 53000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 199000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 11,
        "name": "Introduction chapter in classpath",
        "description": "  NOTE: The introduction file must be named *intro-chapter.adoc* and can be in any package of your application,\n\n  [TIP]\n  \u003d\u003d\u003d\u003d\n  By default Cukedoctor will look into application folders but you can make Cukedoctor look into external folder by setting the following system property:\n  [source,java]\n  ----\n  System.setProperty(\"INTRO_CHAPTER_DIR\",\"/home/some/external/folder\");\n  ----\n  \u003d\u003d\u003d\u003d",
        "id": "documentation-introduction-chapter;introduction-chapter-in-classpath",
        "after": [
          {
            "result": {
              "duration": 75000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 24000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 81000,
              "status": "passed"
            },
            "line": 23,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 24,
              "value": "Feature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 17013000,
              "status": "passed"
            },
            "line": 39,
            "name": "The following asciidoc document is on your application classpath",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.IntroChapterSteps.I_convert_their_json_output_report_using_cukedoctor_converter(java.lang.String)"
            },
            "keyword": "And ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 40,
              "value": "\u003d *Introduction*\n\nCukedoctor is a *Living documentation* tool which integrates Cucumber and Asciidoctor in order to convert your _BDD_ tests results into an awesome documentation.\n\nHere are some design principles:\n\n* Living documentation should be readable and highlight your software features;\n** Most bdd tools generate reports and not a truly documentation.\n* Cukedoctor *do not* introduce a new API that you need to learn, instead it operates on top of http://www.relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter[cucumber json output^] files;\n** In the \u0027worst case\u0027 to \u003c\u003cEnrich-features,enhance\u003e\u003e your documentation you will need to know a bit of http://asciidoctor.org/docs/what-is-asciidoc/[asciidoc markup^]."
            }
          },
          {
            "result": {
              "duration": 50000,
              "status": "passed"
            },
            "line": 53,
            "name": "Bdd tests results are converted into documentation by Cukedoctor",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.IntroChapterSteps.Bdd_tests_results_are_converted_into_documentation_by_Cukedoctor()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 202000,
              "status": "passed"
            },
            "line": 57,
            "name": "Resulting documentation should have the provided introduction chapter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.IntroChapterSteps.I_should_have_awesome_living_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 58,
              "value": "\n\u003d *Documentation*\n\n\u003d\u003d *Introduction*\n\nCukedoctor is a *Living documentation* tool which integrates Cucumber and Asciidoctor in order to convert your _BDD_ tests results into an awesome documentation.\n\nHere are some design principles:\n\n* Living documentation should be readable and highlight your software features;\n** Most bdd tools generate reports and not a truly documentation.\n* Cukedoctor *do not* introduce a new API that you need to learn, instead it operates on top of http://www.relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter[cucumber json output^] files;\n** In the \u0027worst case\u0027 to \u003c\u003cEnrich-features,enhance\u003e\u003e your documentation you will need to know a bit of http://asciidoctor.org/docs/what-is-asciidoc/[asciidoc markup^].\n\n\u003d\u003d *Summary*\n[cols\u003d\"12*^m\", options\u003d\"header,footer\"]\n|\u003d\u003d\u003d\n3+|Scenarios 7+|Steps 2+|Features: 2\n\n|[green]#*Passed*#\n|[red]#*Failed*#\n|Total\n|[green]#*Passed*#\n|[red]#*Failed*#\n|[purple]#*Skipped*#\n|[maroon]#*Pending*#\n|[yellow]#*Undefined*#\n|[blue]#*Missing*#\n|Total\n|Duration\n|Status\n\n12+^|*\u003c\u003cFeature1\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|647ms\n|[green]#*passed*#\n\n12+^|*\u003c\u003cFeature2\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|000ms\n|[green]#*passed*#\n12+^|*Totals*\n|2|0|2|2|0|0|0|0|0|2 2+|647ms\n|\u003d\u003d\u003d\n\n\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(647ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-3"
          }
        ]
      }
    ],
    "name": "Documentation introduction chapter",
    "description": "  \u003d\u003d\u003d\u003d\n  [quote]\n  ____\n  In order to have an introduction chapter in my documentation\n  As a bdd developer\n  I want to be able to provide an asciidoc based document which introduces my software.\n  ____\n  \u003d\u003d\u003d\u003d",
    "id": "documentation-introduction-chapter",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/intro-chapter.feature",
    "tags": [
      {
        "name": "@order-3",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2022-07-31T19:57:14.281Z",
        "before": [
          {
            "result": {
              "duration": 581000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 625000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 12,
        "name": "Default ordering",
        "description": "",
        "id": "ordering;default-ordering",
        "after": [
          {
            "result": {
              "duration": 290000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 219000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 73000,
              "status": "passed"
            },
            "line": 14,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 15,
              "value": "Feature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 12929000,
              "status": "passed"
            },
            "line": 28,
            "name": "I convert them using default order",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.I_convert_the_using_default_order()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 140000,
              "status": "passed"
            },
            "line": 30,
            "name": "Features should be ordered by name in resulting documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.Features_should_be_ordered_by_name_in_resulting_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 31,
              "value": "\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(647ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-1"
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.309Z",
        "before": [
          {
            "result": {
              "duration": 46000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 565000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 57,
        "name": "Custom ordering with tags",
        "description": "    NOTE: Ordering is done using feature tag *@order-*",
        "id": "ordering;custom-ordering-with-tags",
        "after": [
          {
            "result": {
              "duration": 81000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 27000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 66000,
              "status": "passed"
            },
            "line": 61,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 62,
              "value": "@order-2\nFeature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\n@order-1\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 14676000,
              "status": "passed"
            },
            "line": 77,
            "name": "I convert them using tag order",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.I_convert_them__using_tag_order()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 139000,
              "status": "passed"
            },
            "line": 79,
            "name": "Features should be ordered respecting order tag",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.Features_should_be_ordered_respecting_order_tag(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 80,
              "value": "\u003d\u003d *Features*\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(001ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-1"
          }
        ]
      }
    ],
    "name": "Ordering",
    "description": "  \u003d\u003d\u003d\u003d\n  [quote]\n  ____\n  In order to have features ordered in living documentation\n  As a bdd developer\n  I want to control the order of features in my documentation\n  ____\n  \u003d\u003d\u003d\u003d",
    "id": "ordering",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/ordering.feature",
    "tags": [
      {
        "name": "@order-1",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2022-07-31T19:57:14.333Z",
        "before": [
          {
            "result": {
              "duration": 48000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 186000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 4,
        "name": "Render feature tags in that feature\u0027s scenarios",
        "description": "",
        "id": "tag-rendering;render-feature-tags-in-that-feature-s-scenarios",
        "after": [
          {
            "result": {
              "duration": 103000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 26000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 59000,
              "status": "passed"
            },
            "line": 6,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 7,
              "value": "@someTag\nFeature: Feature1\n\n  @otherTag\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\n  @someTag @otherTag\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 12119000,
              "status": "passed"
            },
            "line": 22,
            "name": "I render the feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.TagRenderingSteps.I_render_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 179000,
              "status": "passed"
            },
            "line": 24,
            "name": "the tags displayed under each scenario should not have duplicates",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.TagRenderingSteps.the_tags_displayed_under_each_scenario_should_not_have_duplicates(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 25,
              "value": "\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n[small]#tags: @someTag,@otherTag#\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(001ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n[small]#tags: @someTag,@otherTag#\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-4"
          }
        ]
      },
      {
        "start_timestamp": "2022-07-31T19:57:14.355Z",
        "before": [
          {
            "result": {
              "duration": 43000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.before()"
            }
          },
          {
            "result": {
              "duration": 421000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.before()"
            }
          }
        ],
        "line": 52,
        "name": "Ignore cukedoctor tags in resulting documentation",
        "description": "   Cukedoctor specific tags like `@asciidoc` and `@order` *should not* be rendered in resulting documentation.",
        "id": "tag-rendering;ignore-cukedoctor-tags-in-resulting-documentation",
        "after": [
          {
            "result": {
              "duration": 72000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.after()"
            }
          },
          {
            "result": {
              "duration": 21000,
              "status": "passed"
            },
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.AttachmentSteps.after()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 128000,
              "status": "passed"
            },
            "line": 56,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 57,
              "value": "@someTag @asciidoc @order-99\nFeature: Feature1\n\n  @otherTag @asciidoc\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\n  @someTag @otherTag\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 6677000,
              "status": "passed"
            },
            "line": 72,
            "name": "I render the feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.TagRenderingSteps.I_render_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 127000,
              "status": "passed"
            },
            "line": 74,
            "name": "Cukedoctor tags should not be rendered in documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.TagRenderingSteps.Cukedoctor_tags_should_not_be_rendered_in_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 75,
              "value": "\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n[small]#tags: @someTag,@otherTag#\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(001ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n[small]#tags: @someTag,@otherTag#\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-4"
          }
        ]
      }
    ],
    "name": "Tag rendering",
    "description": "",
    "id": "tag-rendering",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/tag-rendering.feature",
    "tags": [
      {
        "name": "@order-4",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  }
]